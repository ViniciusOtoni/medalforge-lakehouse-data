version: "1.0"

source:
  bronze_table: "bronze.sales_new.sales_bronze_teste"

target:
  catalog: "silver"
  schema:  "sales"
  table:   "sales_clean"
  write:
    mode: "merge"
    merge_keys: ["id"]
    partition_by: ["ano","mes"]
    zorder_by: ["created_at"]

dqx:
  criticality_default: "error"
  checks:
    - name: not_null_id
      criticality: error
      check:
        function: is_not_null
        arguments:
          column: "id"

    - name: not_null_created_at
      criticality: error
      check:
        function: is_not_null
        arguments:
          column: "created_at"

    - name: unique_id
      criticality: error
      check:
        function: is_unique
        arguments:
          column: ["id"]

    - name: amount_range
      criticality: error
      check:
        function: is_in_range
        arguments:
          column: "amount"
          min_limit: 0          # use int; se precisar decimal, passe como string, ex: "0.01"
          max_limit: 100000     # idem: "100000.0"

  custom:
    - name: created_at_valid_date
      criticality: error
      check:
        function: sql_expression
        arguments:
          expression: "to_date(created_at, 'yyyy-MM-dd') IS NOT NULL"
          msg: "created_at inv√°lido"

etl:
  standard:
    - method: trim_columns
      args:
        columns: ["customer_id"]

    - method: normalize_dates
      args:
        columns: ["created_at"]
        format: "yyyy-MM-dd"
        project_ano_mes: true

    - method: cast_columns
      args:
        mapping:
          amount: "double"

    - method: deduplicate
      args:
        keys: ["id"]
        order_by: ["created_at desc"]

quarantine:
  remediate:
    - method: coerce_date
      args:
        column: "created_at"
        from_patterns:
          - "M/d/yyyy"
          - "MM/dd/yyyy"
          - "d/M/yyyy"
          - "dd/MM/yyyy"
          - "yyyy-MM-dd"  
          - "MM-dd-yyyy"
          - "M-d-yyyy"
        to_format: "yyyy-MM-dd"

    - method: clamp_range
      args:
        column: "amount"
        min: 0.0

    - method: drop_if_null
      args:
        columns: ["id"]

  sink:
    table: "silver.quarantine.sales_bronze_data"

customs:
  allow: true
  registry:
    - name: my_custom_discount
      module: "customs.sales_rules"
      method: "apply_discount_if_high_value"
      args_schema:
        percent:   { type: number, min: 0, max: 50 }
        threshold: { type: number, min: 0 }
  use_in:
    - stage: "standard"
      method: "my_custom_discount"
      args:
        percent: 5.0
        threshold: 1000.0
